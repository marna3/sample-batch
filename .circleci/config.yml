version: 2.1

parameters:
  pipeline-sharedlib1:
    description: "Switch to true to trigger the pipeline for the sharedlib1"
    type: boolean
    default: true # パイプラインを実行する場合は、trueを設定
  pipeline-batch1:
    description: "Switch to true to trigger the pipeline for the batch1"
    type: boolean
    default: true # パイプラインを実行する場合は、trueを設定
  # pipeline-batch2:
  #   description: "Switch to true to trigger the pipeline for the batch2"
  #   type: boolean
  #   default: false # パイプラインを実行する場合は、trueを設定

executors:
  temurin:
    docker:
      - image: ${DEVELOPMENT_TOOL_GCP_REGION}-docker.pkg.dev/${DEVELOPMENT_TOOL_GCP_PROJECT}/${DEVELOPMENT_TOOL_BASE_AR_REPO_NAME}/maven:3.9.9-eclipse-temurin-21
        auth:
          username: _json_key
          password: ${DEVELOPMENT_TOOL_GSA_KEY}
  google-cloud-cli:
    docker:
      - image: gcr.io/google.com/cloudsdktool/google-cloud-cli:slim

commands:

  # 単体テスト実行用コマンド
  unit_test:
    steps:
      - run:
          name: Run tests
          command: mvn -f ./pom.xml clean verify -s ./settings.xml
  
  # SBOM解析実行用コマンド
  scan_sbom:
    steps:
      - run:
          name: Install Syft
          command: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Make SBOM
          command: |
            syft scan . \
              --source-name $(basename $(pwd)) \
              --source-version $(echo $(git rev-parse --abbrev-ref HEAD))
      - run:
          name: Install Grype
          command: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Analyze SBOM
          command: grype sbom:./target/syft-sbom.json
  
  # 依存関係ライブラリ脆弱性☑用コマンド
  analyze_dependency:
    steps:
      - run:
          name: Analyze maven dependencies
          command: |
            mvn -f ./pom.xml dependency-check:check -s ./settings.xml

  # コーディングバグチェック用コマンド
  check_coding_bug:
    steps:
      - run:
          name: Check coding bugs
          command: mvn -f ./pom.xml spotbugs:check -s ./settings.xml

  # 静的解析結果保存用コマンド
  store_static_analyzed_reports:
    steps:
      - store_artifacts:
          path: ./target/dependency-check-report.json
          destination: dependency-check-report.json
      - store_artifacts:
          path: ./target/dependency-check-report.html
          destination: dependency-check-report.html
      - store_artifacts:
          path: ./target/spotbugsXml.xml
          destination: spotbugsXml.xml
      - store_artifacts:
          path: ./target/spotbugs.html
          destination: spotbugs.html
      - store_artifacts:
          path: ./target/syft-sbom.json
          destination: syft-sbom.json
      - store_artifacts:
          path: ./grype-scan-report.json
          destination: grype-scan-report.json

  # 単体テスト結果保存用コマンド
  store_unit_test_reports:
    steps:
      - store_artifacts:
          path: ./target/site/jacoco
          destination: jacoco

  # Google Cloudサービスアカウントアクティベート用コマンド
  gcloud_setting:
    steps:
      - run:
          name: Authorize Google Cloud for Function Deploy
          command: |
            echo ${BATCH_GSA_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud auth list
            gcloud config list

  # 共有ライブラリビルド用コマンド
  shared_library_build:
    steps:
      - run:
          name: Build Shared Library and Install to Maven Local Repository
          command: mvn -f ./pom.xml clean install -DskipTests -s ./settings.xml
  
  # バッチビルド用コマンド
  batch_build:
    steps:
      - run:
          name: Build Function
          command: mvn -f ./pom.xml clean package -DskipTests -s ./settings.xml -P when-build

  # バッチデプロイ用コマンド
  deploy:
    steps:
      - run:
          name: Deploy to HTTP Function
          command: |
            gcloud functions deploy ${BATCH_NAME} \
              --gen2 \
              --project=${BATCH_GCP_PROJECT} \
              --region=${BATCH_GCP_REGION} \
              --runtime=${BATCH_RUNTIME} \
              --source=./target \
              --entry-point=${BATCH_ENTRY_POINT} \
              --trigger-http \
              --allow-unauthenticated

jobs:
  # 共有ライブラリ (sharedlib1) の静的解析用ジョブ
  sharedlib1-static-analysis:
    executor: temurin
    working_directory: ~/project/libs/sharedlib1
    steps:
      - checkout:
          path: ~/project
      # - restore_cache:
      #     keys:
      #       - dependency-check-db-{{ .Branch }}-{{ .Revision }}
      #       - dependency-check-db-
      - scan_sbom
      # - analyze_dependency
      - check_coding_bug
      # - save_cache:
      #     paths:
      #       - .m2/repository/org/owasp/dependency-check-data
      #     key: dependency-check-db-{{ .Branch }}-{{ .Revision }}
      - store_static_analyzed_reports
  
  # 共有ライブラリ (sharedlib1) の単体テスト用ジョブ
  sharedlib1-unit-test:
    executor: temurin
    working_directory: ~/project/libs/sharedlib1
    steps:
      - checkout:
          path: ~/project
      - unit_test
      - store_unit_test_reports

  # バッチ (batch1) の静的解析用ジョブ
  batch1-static-analysis:
    executor: temurin
    working_directory: ~/project/batches/batch1
    steps:
      - checkout:
          path: ~/project
      # - restore_cache:
      #     keys:
      #       - dependency-check-db-{{ .Branch }}-{{ .Revision }}
      #       - dependency-check-db-
      - scan_sbom
      # - analyze_dependency
      - check_coding_bug
      # - save_cache:
      #     paths:
      #       - .m2/repository/org/owasp/dependency-check-data
      #     key: dependency-check-db-{{ .Branch }}-{{ .Revision }}
      - store_static_analyzed_reports
  
  # バッチ (batch1) の単体テスト用ジョブ
  batch1-unit-test:
    executor: temurin
    working_directory: ~/project/batches/batch1
    steps:
      - checkout:
          path: ~/project
      - unit_test
      - store_unit_test_reports

  # 共有ライブラリ (sharedlib1) のビルド用ジョブ
  sharedlib1-build:
    executor: temurin
    working_directory: ~/project/libs/sharedlib1
    steps:
      - checkout:
          path: ~/project
      - shared_library_build
      - persist_to_workspace:
          root: ~/.m2/repository/sample # "sample"部分は共有ライブラリのpom.xmlのgroupIdに合わせてリポジトリを指定
          paths:
            - ./**/* # Mavenローカルリポジトリにインストールされた共有ライブラリを指定

  # バッチ (batch1) のビルド用ジョブ
  batch1-build:
    executor: temurin
    working_directory: ~/project/batches/batch1
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/.m2/repository/sample # "sample"部分は共有ライブラリのpom.xmlのgroupIdに合わせてリポジトリを指定
      - batch_build
      - persist_to_workspace:
          root: target
          paths:
            - ./*.jar # ビルド済みのバッチのjarファイルを指定

  # バッチ (batch1) のデプロイ用ジョブ
  batch1-deploy:
    executor: google-cloud-cli
    working_directory: ~/project/batches/batch1
    steps:
      - checkout:
          path: ~/project
      - gcloud_setting
      - attach_workspace:
          at: ~/project/batches/batch1/target # gcloud functions deployのソースディレクトリの指定に合わせて設定
      - deploy


workflows:

  # 共有ライブラリの静的解析と単体テスト用ワークフローを定義
  sharedlib1-prebuild:
    when: 
      and: 
        - equal: [ true, << pipeline.parameters.pipeline-sharedlib1 >> ]
        - or: 
          - matches: { pattern: "^feature/.*", value: << pipeline.git.branch >> }
          - matches: { pattern: "^bugfix/.*", value: << pipeline.git.branch >> }
    jobs:
      # プレビルドパイプライン
      - sharedlib1-static-analysis:
          filters: &prebuild_filters
            branches:
              only: 
                - /^feature\/.*|^bugfix\/.*/
          context:
            - DEVELOPMENT_TOOL
            - SHAREDLIB1_DEV
      - sharedlib1-unit-test:
          filters: *prebuild_filters
          context:
            - DEVELOPMENT_TOOL
            - SHAREDLIB1_DEV

  # バッチのITa環境デプロイ用のワークフローを定義
  batch1-develop:
    when: 
      and: 
        - equal: [ true, << pipeline.parameters.pipeline-batch1 >> ]
        - or: 
          - equal: [ "main", << pipeline.git.branch >> ] # 一時的にdevelopからmainに変更
          - matches: { pattern: "^feature/.*", value: << pipeline.git.branch >> }
          - matches: { pattern: "^bugfix/.*", value: << pipeline.git.branch >> }
    jobs:
      # バッチの静的解析用ジョブ
      - batch1-static-analysis:
          filters: &prebuild_filters
            branches:
              only: 
                - /^feature\/.*|^bugfix\/.*/
                - main # 一時的にdevelopからmainに変更
          context:
            - DEVELOPMENT_TOOL
            - BATCH1_DEV
      # バッチの単体テスト用ジョブ
      - batch1-unit-test:
          filters: *prebuild_filters
          context:
            - DEVELOPMENT_TOOL
            - BATCH1_DEV
      # バッチで使用する共有ライブラリの静的解析用ジョブ (developブランチマージ時に実行)
      - sharedlib1-static-analysis:
          filters: &develop_filters
            branches:
              only: 
                - main # 一時的にdevelopからmainに変更
          context:
            - DEVELOPMENT_TOOL
            - SHAREDLIB1_DEV
      # バッチで使用する共有ライブラリの単体テスト用ジョブ (developブランチマージ時に実行)
      - sharedlib1-unit-test:
          filters: *develop_filters
          context:
            - DEVELOPMENT_TOOL
            - SHAREDLIB1_DEV
      # バッチで使用する共有ライブラリのビルド用ジョブ (共有ライブラリをローカルリポジトリにインストール)
      - sharedlib1-build:
          requires:
            - sharedlib1-static-analysis
            - sharedlib1-unit-test
          filters: *develop_filters
          context:
            - DEVELOPMENT_TOOL
            - SHAREDLIB1_DEV
      # バッチのビルド用ジョブ (共有ライブラリのローカルリポジトリを参照し、バッチをビルド)
      - batch1-build:
          requires:
            - batch1-static-analysis
            - batch1-unit-test
            - sharedlib1-build
          filters: *develop_filters
          context:
            - DEVELOPMENT_TOOL
            - BATCH1_DEV
      # デプロイ用ジョブ (ビルド済みのバッチをデプロイ)
      - batch1-deploy:
          requires:
            - batch1-build
          filters: *develop_filters
          context:
            - BATCH1_DEV
